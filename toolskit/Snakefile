        #####on importe les modules pythons dont on aura besoin
configfile: "config.yaml"
#import copy
        #######on donne le dossier d'origine des données fastq brute à analyser et on initialise son path avec "Path"
hu= config["references"]["human"]
pa= config["references"]["parasite"]
# -----pour faciliter le positionnement des autres dossiers nécessaires reativement à celui-ci si nécessaire
#dossier_ori_data_raw = input ("entrer le dossier source : " )
#dossier_ori_data_raw = "/Users/acquahpatriciahotmail.com/ws/data"
dossier_ori_data_raw = config["ENVS"]["home"]+"/uploads/data"
path_dossier_ori_data_raw = Path(dossier_ori_data_raw)
#dossier_parametre_file = "/Users/acquahpatriciahotmail.com/Documents/covid/data_exo_stan/snake_cov_exo_stan1/parametres/parametre.csv"
#path_qc_parametre_file = path_dossier_ori_data_raw.parent / "parametres/parametre.csv"
path_dossier_ori_parent = path_dossier_ori_data_raw.parent


        ####### les transformations suivantes sont faites pour obtenir dans une liste ordonnée

# les noms brutes de tous les runs dans le dossier source des données brutes
# utilise une loop for pour obtenir donne ss forme de liste la totalité des .fastq dans le dossier_ori_data_raw
# glob permet de récupérer les paths des fichiers dans le dossier_ori respectant la reg "*.fastq.gz"

###########faire attention si les fichiers sont d'un autre type
samples = []
sample = []
sample = expand(config["samples"])
for f in sample:
    f = config["samples"][f]
    samples.append(f)

extensions = []
extension = []
extension = expand(config["extensions"])
for e in extension:
    e = config["extensions"][e]
    extensions.append(e)

print(samples)
print(extensions)

pes = [1,2]
ex = extension
 
print(dossier_ori_data_raw)
rule all:
    input :
        expand(path_dossier_ori_parent / "res/dbsub/PathoUnmapped{sample}1.fastq",sample=samples,ex=extensions),
        expand(path_dossier_ori_parent / "res/dbsub/PathoUnmapped{sample}2.fastq",sample=samples,ex=extensions),
        expand(path_dossier_ori_parent / "res/dbsub/PathoMapped{sample}1.fastq",sample=samples,ex=extensions),
        expand(path_dossier_ori_parent / "res/dbsub/PathoMapped{sample}2.fastq",sample=samples,ex=extensions)
rule fastp_trim :
    input :
        R1= path_dossier_ori_parent / "data/{sample}1.fastq.gz",
        R2= path_dossier_ori_parent / "data/{sample}2.fastq.gz"
    output :
        R1=path_dossier_ori_parent / "res/qc/{sample}1_val_1.fq.gz",
        R2=path_dossier_ori_parent / "res/qc/{sample}2_val_2.fq.gz"
    params:
        trim_front1 = config["parameter"]["trim_front1"] if config["parameter"]["trim_front1"] is not None else "",
        trim_front2 = config["parameter"]["trim_front2"] if config["parameter"]["trim_front2"] is not None else "",
        trim_tail1 = config["parameter"]["trim_tail1"] if config["parameter"]["trim_tail1"] is not None else "",
        trim_tail2 = config["parameter"]["trim_tail2"] if config["parameter"]["trim_tail2"] is not None else "",
        n_base_limit = config["parameter"]["n_base_limit"] if config["parameter"]["n_base_limit"] is not None else "",
        max_lg = config["parameter"]["max_lg"] if config["parameter"]["max_lg"] is not None else "",
        max_ql = config["parameter"]["max_ql"] if config["parameter"]["max_ql"] is not None else ""
    shell :
        "trim_galore {params.max_ql} {params.max_lg} {params.trim_front1} {params.trim_front2} {params.trim_tail1} {params.trim_tail2} {params.n_base_limit} --paired {input.R1} {input.R2} -o uploads/res/qc"
rule move :
    input :
        R1=path_dossier_ori_parent / "res/qc/{sample}1_val_1.fq.gz",
        R2=path_dossier_ori_parent / "res/qc/{sample}2_val_2.fq.gz"
    output :
        R1=path_dossier_ori_parent / "res/qc/{sample}1.fq.gz",
        R2=path_dossier_ori_parent / "res/qc/{sample}2.fq.gz"
    shell :
        "mv {input.R1} {output.R1} && mv {input.R2} {output.R2} && rm -fr uploads/res/qc/*txt*"
rule HostAlign : 
    input : 
        R1=path_dossier_ori_parent / "res/qc/{sample}1.fq.gz",
        R2=path_dossier_ori_parent / "res/qc/{sample}2.fq.gz",
        #ref=path_dossier_ori_parent / "references/human/GCF_000001405.39_GRCh38.p13_genomic.fna.gz"
        ref=path_dossier_ori_parent / "references/human" / str(hu)
    output : 
        path_dossier_ori_parent / "res/dbsub/HostAlign{sample}.sam"
    shell : 
        "bwa mem {input.ref} {input.R1} {input.R2} > {output}"
rule HostUnmapped_and_HostMapped : 
    input :
        path_dossier_ori_parent / "res/dbsub/HostAlign{sample}.sam"
    output :
        R1=path_dossier_ori_parent / "res/dbsub/HostUnmapped{sample}.bam",
        R2=path_dossier_ori_parent / "res/dbsub/HostMapped{sample}.bam"
    shell :
        "samtools view -Sb -f0x4 {input} > {output.R1} && samtools view -Sb -F0x4 {input} > {output.R2}"
rule HostUnmapped_fq_and_HostMapped_fq :
    input :
        R1=path_dossier_ori_parent / "res/dbsub/HostUnmapped{sample}.bam",
        R2=path_dossier_ori_parent / "res/dbsub/HostMapped{sample}.bam"
    output :
        R1=path_dossier_ori_parent / "res/dbsub/HostUnmapped{sample}1.fastq",
        R2=path_dossier_ori_parent / "res/dbsub/HostUnmapped{sample}2.fastq",
        R3=path_dossier_ori_parent / "res/dbsub/HostMapped{sample}1.fastq",
        R4=path_dossier_ori_parent / "res/dbsub/HostMapped{sample}2.fastq"
    shell :
        "samtools bam2fq -1 {output.R1} -2 {output.R2} -0 /dev/null -s /dev/null -n -F 0x900 {input.R1} && samtools bam2fq -1 {output.R3} -2 {output.R4} -0 /dev/null -s /dev/null -n -F 0x900 {input.R2}"
rule patho_align :
    input :
        R1=path_dossier_ori_parent / "res/dbsub/HostUnmapped{sample}1.fastq",
        R2=path_dossier_ori_parent / "res/dbsub/HostUnmapped{sample}2.fastq",
        ref=path_dossier_ori_parent / "references/parasite/" / str(pa)
    output :
        path_dossier_ori_parent / "res/dbsub/Patho_align{sample}.sam"
    shell :
        "bwa mem {input.ref} {input.R1} {input.R2} > {output}"
rule PathoMapped_and_PathoUnmapped :
    input :
        path_dossier_ori_parent / "res/dbsub/Patho_align{sample}.sam"
    output :
        R1=path_dossier_ori_parent / "res/dbsub/PathoMapped{sample}.bam",
        R2=path_dossier_ori_parent / "res/dbsub/PathoUnmapped{sample}.bam"
    params:
        quality = config["references"]["quality"] if config["references"]["quality"] is not None else ""
    shell :
        "samtools view {params.quality} -Sb -F0x4 {input} > {output.R1} && samtools view -Sb -f0x4 {input} > {output.R2}"
rule PathoUnmapped_fq_and_PathoMapped_fq :
    input :
        R1=path_dossier_ori_parent / "res/dbsub/PathoMapped{sample}.bam",
        R2=path_dossier_ori_parent / "res/dbsub/PathoUnmapped{sample}.bam"
    output :
        R1=path_dossier_ori_parent / "res/dbsub/PathoUnmapped{sample}1.fastq",
        R2=path_dossier_ori_parent / "res/dbsub/PathoUnmapped{sample}2.fastq",
        R3=path_dossier_ori_parent / "res/dbsub/PathoMapped{sample}1.fastq",
        R4=path_dossier_ori_parent / "res/dbsub/PathoMapped{sample}2.fastq"
    shell :
        "samtools bam2fq -1 {output.R3} -2 {output.R4} -0 /dev/null -s /dev/null -n -F 0x900 {input.R1} && samtools bam2fq -1 {output.R1} -2 {output.R2} -0 /dev/null -s /dev/null -n -F 0x900 {input.R2}"